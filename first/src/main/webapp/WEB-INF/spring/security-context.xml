<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">


<bean id="customAccessDenied" class="org.zerock.security.CustomAccessDeniedHandler"></bean>
<bean id="customLoginSuccess" class="org.zerock.security.CustomLoginSuccessHandler"></bean>
<bean id="bcryptPasswordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"></bean>
<bean id="customUserDetailsService" class="org.zerock.security.CustomUserDetailsService"></bean>


<security:http>
	<!-- 인터셉터 이용 -->
	<security:intercept-url pattern="/sample/all" access="permitAll"/>
	<security:intercept-url pattern="/sample/member" access="hasRole('ROLE_MEMBER')"/>
	<security:intercept-url pattern="/sample/admin" access="hasRole('ROLE_ADMIN')"/>

	<security:access-denied-handler ref="customAccessDenied" />
	<!-- 커스텀 로그인 : 로그인 성공 시 AuthenticationSuccessHandler을 implement 하는 커스텀 핸들러 사용 가능 (롤 별로 리다이렉트 다르게 등) always-use-default-target="false"-->
	<security:form-login login-page="/loginPage" authentication-success-handler-ref="customLoginSuccess"/>
	<!-- 자동로그인 설정 -->
	<security:remember-me data-source-ref="dataSource" token-validity-seconds="604800"/>
	<!-- 커스텀 로그아웃 : 로그아웃 시 자동로그인 쿠키도 삭제  -->
	<security:logout logout-url="/logoutPage" logout-success-url="/loginPage?logout=true" 
		invalidate-session="true" delete-cookies="remember-me,JSESSION_ID"/>
	
	<!-- CSRF 토큰 생성 비활성화
	<security:csrf disabled="true"/> -->
</security:http>


<security:authentication-manager>
	<!-- username 뿐만 아닌 다른 것들도 활용 위해 UserDetailsService를 커스텀 --> 
	<security:authentication-provider user-service-ref="customUserDetailsService">
	
	<!-- 시큐리티에 저장된 형식을 사용하는 경우 - JDBC 이용 -->
	<!-- 개인적인 형식의 테이블을 사용하는 경우 : 쿼리문을 지정해주면 JDBC 이용하는 설정 그대로 사용 가능 -->
		<!-- root-context.xml에 등록된 dataSource 빈 확인 --> 
		<!-- 각각 인증, 권환 확인에 필요한 쿼리 --> <!-- 
		<security:jdbc-user-service 
			data-source-ref="dataSource"
			users-by-username-query="select userid, userpw, enabled from tbl_member where userid=?" 
			authorities-by-username-query="select userid, auth from tbl_member_auth where userid=?" />  -->
			
		<!-- 시큐리티 5.0부터 password encoder 사용 필수이므로 Bcrypt Password Encoder 활용 : 이미 스프링 시큐리티 api에 포함되어있음 -->
		<!-- 실제 DB에 기록하는 패스워드는 BCRYPT 통해서 암호화된 상태로 넣어 주어야 함. -->
		<security:password-encoder ref="bcryptPasswordEncoder"/>		
		
		<!-- 직접 권한 지정 --> <!-- 
		<security:user-service>
			<security:user name="member" password="{noop}member" auth="ROLE_MEMBER"/>
		</security:user-service> -->
	</security:authentication-provider>
</security:authentication-manager>

</beans>